<?php
/**
 * PHP Layout Drupal module hook definitions and module placeholder.
 */

use MakinaCorpus\Drupal\Layout\Form\LayoutContextEditForm;
use MakinaCorpus\Drupal\Layout\Storage\Layout;
use MakinaCorpus\Layout\Error\InvalidTokenError;

/**
 * Layout edit token get parameter name
 */
const PHP_LAYOUT_TOKEN_PARAMETER = 'layout-edit';

/**
 * Implements hook_page_build().
 */
function phplayout_page_build(&$page) {
  if (arg(0) === 'node' && !arg(2) && ($node = menu_get_object())) {

    /** @var \MakinaCorpus\Layout\Storage\LayoutStorageInterface $storage */
    $storage = \Drupal::service('php_layout.storage');
    /** @var \MakinaCorpus\Layout\Controller\Context $context */
    $context = \Drupal::service('php_layout.context');

    // Fetch all layouts for the node
    $layoutIdList = db_query("select id from {layout} where node_id = ?", [$node->nid])->fetchCol();

    if (isset($_GET[PHP_LAYOUT_TOKEN_PARAMETER])) {
      try {
        $context->setCurrentToken($_GET[PHP_LAYOUT_TOKEN_PARAMETER]);
      } catch (InvalidTokenError $e) {
        // Fallback on non-edit mode
      }
    }

    if ($layoutIdList) {
      $layouts = $storage->loadMultiple($layoutIdList);
    } else {
      // Create layout for node
      $layouts = [$storage->create(['node_id' => $node->nid])];
    }

    $context->add($layouts, true /* @todo access checks on each layout */);

    /** @var \MakinaCorpus\Layout\Render\Renderer $renderer */
    $renderer = \Drupal::service('php_layout.renderer');

    // Working multiple pass version
    foreach ($context->getAll() as $layout) {
      if (!$layout instanceof Layout || !($region = $layout->getRegion())) {
        $region = 'content';
      }
      $page[$region]['layout'][$layout->getId()] = ['#markup' => $renderer->render($layout->getTopLevelContainer())];
    }
  }

  $page['content']['layout_edit_form'] = \Drupal::formBuilder()->getForm(LayoutContextEditForm::class);
}
