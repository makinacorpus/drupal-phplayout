<?php
/**
 * PHP Layout Drupal module hook definitions and module placeholder.
 */

use MakinaCorpus\Drupal\Layout\Form\LayoutContextEditForm;
use MakinaCorpus\Drupal\Layout\Storage\Layout;
use MakinaCorpus\Drupal\Layout\Storage\LayoutStorage;
use MakinaCorpus\Layout\Error\InvalidTokenError;
use MakinaCorpus\Layout\Grid\HorizontalContainer;
use MakinaCorpus\Layout\Grid\Item;
use MakinaCorpus\Layout\Storage\LayoutStorageInterface;

/**
 * Layout edit token get parameter name
 */
const PHP_LAYOUT_TOKEN_PARAMETER = 'layout-edit';

/**
 * Implements hook_menu().
 */
function phplayout_menu() {
  $items = [];

  // Edit callbacks for AJAX/other.
  $items['layout/ajax/add-column'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::addColumn'],
  ];
  $items['layout/ajax/add-column-container'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::addColumnContainer'],
  ];
  $items['layout/ajax/add-item'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::add'],
  ];
  $items['layout/ajax/remove-column'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::removeColumn'],
  ];
  $items['layout/ajax/remove'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::remove'],
  ];

  // Add item form.
  $items['layout/callback/add-item'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::addItemForm'],
  ];

  // Add item node selection autocomplete callback.
  $items['layout/callback/node-autocomplete'] = [
    'page callback' => 'sf_dic_page',
    'page arguments' => ['php_layout.drupal_layout_controller::nodeAutocomplete'],
  ];

  return $items;
}

/**
 * Creates a sample layout
 */
function _phplayout_create_sample_layout(LayoutStorage $storage, Layout $layout) {

  // Place a top level container and build layout (no items)
  $topLevel = $layout->getTopLevelContainer();
  $c1 = new HorizontalContainer('C1');
  $topLevel->append($c1);
  $c11 = $c1->appendColumn('C11');
  $c12 = $c1->appendColumn('C12');
  $c2 = new HorizontalContainer('C2');
  $c12->append($c2);
  $c21 = $c2->appendColumn('C21');
  $c22 = $c2->appendColumn('C22');
  $c3 = new HorizontalContainer('C3');
  $topLevel->append($c3);
  $c31 = $c3->appendColumn('C31');
  $c32 = $c3->appendColumn('C32');
  $c33 = $c3->appendColumn('C33');

  $nidList = db_query("SELECT nid FROM {node}")->fetchCol();
  $nidIndex = 0;
  $modeList = ['full', 'teaser'];
  $modeIndex = 0;

  // Now place all items
  $a1_1 = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a1_2 = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a2   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b3   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b4   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a5   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a6   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b7_1 = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b7_2 = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b8   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a9   = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b10  = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $b11  = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);
  $a12  = new Item('node', $nidList[($nidIndex++) % count($nidList)], $modeList[($modeIndex++) % count($modeList)]);

  $c11->append($a1_1);
  $c11->append($b4);

  $c21->append($a2);
  $c21->append($a5);

  $c22->append($b3);

  $c31->append($a6);
  $c31->append($a9);

  $c32->append($b7_1);
  $c32->append($b10);

  $c33->append($b8);
  $c33->append($b11);
  $c33->append($a1_2);

  $topLevel->append($a12);
  $topLevel->append($b7_2);

  $storage->update($layout);
}

/**
 * Implements hook_page_build().
 */
function phplayout_page_build(&$page) {
  if (arg(0) === 'node' && !arg(2) && ($node = menu_get_object())) {

    /** @var \MakinaCorpus\Layout\Storage\LayoutStorageInterface $storage */
    $storage = \Drupal::service('php_layout.storage');
    /** @var \MakinaCorpus\Layout\Controller\Context $context */
    $context = \Drupal::service('php_layout.context');

    // Fetch all layouts for the node
    $layoutIdList = db_query("select id from {layout} where node_id = ?", [$node->nid])->fetchCol();

    if ($layoutIdList) {
      $layouts = $storage->loadMultiple($layoutIdList);
    } else {
      // Create layout for node
      $layouts = [$storage->create(['node_id' => $node->nid])];
    }

    $context->add($layouts, true /* @todo access checks on each layout */);

    // Load the token after we did loaded all the layouts, to ensure that
    // their temporary equivalents attached to the token will be reloaded
    // instead.
    if (isset($_GET[PHP_LAYOUT_TOKEN_PARAMETER])) {
      try {
        $context->setCurrentToken($_GET[PHP_LAYOUT_TOKEN_PARAMETER]);
      } catch (InvalidTokenError $e) {
        // Fallback on non-edit mode
      }
    }

    /** @var \MakinaCorpus\Layout\Render\Renderer $renderer */
    $renderer = \Drupal::service('php_layout.renderer');

    // Working multiple pass version
    foreach ($context->getAll() as $layout) {
      // _phplayout_create_sample_layout($storage, $layout);
      if (!$layout instanceof Layout || !($region = $layout->getRegion())) {
        $region = 'content';
      }
      $page[$region]['layout'][$layout->getId()] = ['#markup' => $renderer->render($layout->getTopLevelContainer())];
    }

    if ($context->hasToken()) {
      $path = drupal_get_path('module', 'phplayout');
      drupal_add_css($path . '/public/edit.css');
      drupal_add_js($path . '/public/edit.js');
    }

    $page['content']['layout_edit_form'] = \Drupal::formBuilder()->getForm(LayoutContextEditForm::class);
    $page['content']['layout_edit_form']['#weight'] = -1000;
  }
}
